{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE PolyKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE NoMonomorphismRestriction #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE TypeSynonymInstances #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE StandaloneDeriving #-}


module $moduleName where

import $moduleName.Internal

import           LiveVDom
import           Valentine
import           Data.JSString (JSString)
import Control.Lens hiding (Identity)
import Data.Vinyl




hello :: (MailboxName âˆˆ mailboxes) => Rec Use mailboxes -> Desc Identity ()
hello recMailboxes = [valentine|
<div>
  <section id="hello-app">
    <header id="header">
     <h1>
         $${textBoxWith (\str -> sendMessage (snd mb) (ExampleMailbox str) ) [] Nothing}
     <h1>
         Hello
         #{fmap getName (fst mb) }

|]
  where
   (Use  mb)  = recMailboxes ^. rlens SMailboxName



runMain :: IO ()
runMain = do
  container <- createContainer
  mb <- spawnIO  (ExampleMailbox "Name")
  myExample <- (recvIO . fst)  mb
  let recMailbox = (SMailboxName =:: mb) :& RNil
  runDom container (return ()) $$ elem' "div" [] [] $$ hello recMailbox