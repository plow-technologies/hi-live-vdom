
import           Data.Monoid
import           Development.Shake
import           Development.Shake.Command
import           Development.Shake.FilePath
import           Development.Shake.Util



-- default build directory
buildDir = "_build"




-- main build
main :: IO () -- , shakeVerbosity=Diagnostic
main = (shakeArgs shakeOptions{shakeFiles=buildDir}) execute
  where
   -- Build Target files and directories
   execute = wants >> rules
   wants = want ([packageExecutableFile
                , sandbox ] ++ (fmap nameSubmodule  subModules))
   subModules = [stmNotify
               , valentine
               , ffiQQ
               , ghcjsVdom
               , liveVdom]
   ghcjsServantClient = "ghcjs-servant-client"
   stmNotify = "stm-notify"
   ffiQQ = "ghcjs-ffiqq"
   ghcjsVdom = "ghcjs-vdom"   
   sandbox = ".cabal-sandbox" </>  "add-source-timestamps"
   valentine = "valentine"
   liveVdom = "live-vdom"
   packageExecutableFile  =  "dist"</>"build" </>"$packageName"  </> "$packageName" <.> "jsexe" </> "all.js"

   rules =  stmNotifyRule <>
            valentineRule <>
            liveVdomRule <>
            packageExecutableFileRule <>
            ghcjsServantClientRule <>
            sandboxRule <>
            ffiQQRule <>
            ghcjsVdomRule <>
            cleanarg
   ghcjsServantClientRule = nameSubmodule ghcjsServantClient %> \out -> do
     need [sandbox]
     gitAddOneTime (buildDir </> ghcjsServantClient) gitPath 
     sandboxAdd
          where
            gitPath = "https://github.com/plow-technologies/ghcjs-servant-client.git"
            sandboxAdd = cmd "cabal sandbox add-source" [buildDir </> ghcjsServantClient]
   stmNotifyRule = (nameSubmodule stmNotify) %> \out -> do
     need [sandbox]
     gitAddOneTime (buildDir </> stmNotify) gitPath 
     sandboxAdd
       where
         gitPath = "https://github.com/plow-technologies/stm-notify"
         sandboxAdd = cmd "cabal sandbox add-source" [buildDir </> stmNotify]
   valentineRule = (nameSubmodule valentine) %> \out -> do
     need [sandbox]     
     gitAddOneTime (buildDir </> valentine) gitPath 
     sandboxAdd
       where
         gitPath = "https://github.com/plow-technologies/valentine"
         sandboxAdd = cmd "cabal sandbox add-source" [buildDir </> valentine]
   liveVdomRule = (nameSubmodule liveVdom) %> \out -> do
     need [sandbox]
     gitAddOneTime (buildDir </> liveVdom) gitPath 
     sandboxAdd
       where
        gitPath = "https://github.com/plow-technologies/live-vdom"
        sandboxAdd = cmd "cabal sandbox add-source" [buildDir </> liveVdom]
   ffiQQRule = (nameSubmodule ffiQQ) %> \out -> do
     need [sandbox]
     gitAddOneTime (buildDir </> ffiQQ) gitPath 
     sandboxAdd
       where
         gitPath = "https://github.com/ghcjs/ghcjs-ffiqq.git"
         sandboxAdd = cmd "cabal sandbox add-source" [buildDir </> ffiQQ]
   ghcjsVdomRule = (nameSubmodule ghcjsVdom) %> \out -> do
     need [sandbox]
     gitAddOneTime (buildDir </> ghcjsVdom) gitPath 
     sandboxAdd
         where
           gitPath = "https://github.com/plow-technologies/ghcjs-vdom.git"
           sandboxAdd = cmd "cabal sandbox add-source" [buildDir </> ghcjsVdom]
   packageExecutableFileRule = packageExecutableFile %> \out -> do
        need [sandbox
             ,buildDir </> ghcjsServantClient
             ,buildDir </> stmNotify
             ,buildDir </> valentine
             ,buildDir </> liveVdom
             ,buildDir </> ffiQQ
             ,buildDir </> ghcjsVdom]
        () <- cmd "cabal update"
        () <- cmd "cabal install --ghcjs --reorder-goals"
        () <- cmd "cabal configure --ghcjs"
        cmd "cabal build"

   sandboxRule = sandbox %> \_ -> cmd "cabal sandbox init"

-- Cleanup --------------------------------------------------
   cleanarg = phony "clean" $$ do
       putNormal "cleaning files in build"
       putNormal "removing submodules ..."
       (cmd "git submodule deinit -f " ) `traverse` ((buildDir </> ) `fmap` subModules)   :: Action [()]
       (cmd "git rm -f") `traverse` ((buildDir </> ) `fmap` subModules)   :: Action [()]
       () <- cmd "rm -rf" [".git" </> "modules" </> buildDir]
       () <- cmd "rm -rf" [buildDir]
       () <- cmd "cabal clean"
       () <- cmd "cabal sandbox delete"
       return ()



-- | fp is the local file path of the git repo, gitpath is the remote (https://...) path
gitAddOneTime :: FilePath  -> FilePath  -> Action ()
gitAddOneTime fp gitPath  = do
    rslt <- doesFileExist (fp </> ".git" )
    if rslt
       then do
         putNormal $ fp ++ " exists"
         gitInitSubCmd
         gitUpdateSubCmd
       else do
         putNormal $ fp ++ "/.git " ++ " does not exist"
         dirExists <- doesDirectoryExist fp         
         if dirExists
            then removeDirectory >> gitAddSubCmd >> gitInitSubCmd >> gitUpdateSubCmd
            else do
              gitAddSubCmd
              gitInitSubCmd
              gitUpdateSubCmd

  where
     gitAddSubCmd :: Action ()
     gitAddSubCmd = command [(Cwd buildDir)] "git" ["submodule","add",gitPath]
     gitInitSubCmd = command_ [] "git" ["submodule","init" ]
     gitUpdateSubCmd = command_ [] "git" ["submodule","update" , fp]
     removeDirectory =   command_ [] "rm" ["-rf", fp]



-- | Name a submodule with the build dir and the submodule hidden file (.git)

nameSubmodule mod =  buildDir </> mod </> ".git"
