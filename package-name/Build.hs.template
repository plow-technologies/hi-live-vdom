#!/usr/bin/env runhaskell

import           Data.Monoid
import           Development.Shake
import           Development.Shake.Command
import           Development.Shake.FilePath
import           Development.Shake.Util



-- default build directory
buildDir = "_build"


-- main build
main :: IO () -- , shakeVerbosity=Diagnostic
main = (shakeArgs shakeOptions{shakeFiles=buildDir}) execute
  where
   -- Build Target files and directories
   execute = wants >> rules
   wants = want ([packageExecutableFile
                , sandbox ] ++ (fmap (buildDir </>)  subModules))
   subModules = [stmNotify
               , valentine
               , ffiQQ
               , ghcjsVdom
               , liveVdom]


   stmNotify = "stm-notify"
   ffiQQ = "ghcjs-ffiqq"
   ghcjsVdom = "ghcjs-vdom"
   sandbox = ".cabal-sandbox"
   valentine = "valentine"
   liveVdom = "live-vdom"
   packageExecutableFile  =  "dist"</>"build" </>"$packageName"  </> "$packageName"


   -- Rules
   rules =  stmNotifyRule <>
            valentineRule <>
            liveVdomRule <>
            packageExecutableFileRule <>
            sandboxRule <>
            ffiQQRule <>
            ghcjsVdomRule <>
            cleanarg


   stmNotifyRule = buildDir </> stmNotify %> \out -> do
     need [sandbox]
     () <- cmd Shell (Cwd buildDir) "git submodule add https://github.com/plow-technologies/stm-notify"
     cmd "cabal sandbox add-source" [buildDir </> stmNotify]



   valentineRule = buildDir </> valentine %> \out -> do
     need [sandbox]
     () <- cmd Shell (Cwd buildDir) "git submodule add https://github.com/plow-technologies/valentine"
     cmd "cabal sandbox add-source" [buildDir </> valentine]



   liveVdomRule = buildDir </> liveVdom %> \out -> do
     need [sandbox]
     () <- cmd Shell (Cwd buildDir) "git submodule add https://github.com/plow-technologies/live-vdom"
     cmd "cabal sandbox add-source" [buildDir </> liveVdom]




   ffiQQRule = buildDir </> ffiQQ %> \out -> do
     need [sandbox]
     () <- cmd Shell (Cwd buildDir) "git submodule add https://github.com/ghcjs/ghcjs-ffiqq.git"
     cmd "cabal sandbox add-source" [buildDir </> ffiQQ]



   ghcjsVdomRule = buildDir </> ghcjsVdom %> \out -> do
     need [sandbox]
     () <- cmd Shell (Cwd buildDir) "git submodule add https://github.com/plow-technologies/ghcjs-vdom.git"
     cmd "cabal sandbox add-source" [buildDir </> ghcjsVdom]


   packageExecutableFileRule = packageExecutableFile %> \out -> do
     need [sandbox
          ,buildDir </> stmNotify
          ,buildDir </> valentine
          ,buildDir </> liveVdom
          ,buildDir </> ffiQQ
          ,buildDir </> ghcjsVdom]
     () <- cmd "cabal update"
     () <- cmd "cabal install --ghcjs --reorder-goals"
     () <- cmd "cabal configure --ghcjs"
     cmd "cabal build"



   sandboxRule = sandbox %> \_ -> cmd "cabal sandbox init"

-- Cleanup --------------------------------------------------
   cleanarg = phony "clean" $$ do
       putNormal "cleaning files in build"
       putNormal "removing submodules ..."
       (cmd "git submodule deinit -f " ) `traverse` ((buildDir </> ) `fmap` subModules)   :: Action [()]
       (cmd "git rm -f") `traverse` ((buildDir </> ) `fmap` subModules)   :: Action [()]
       () <- cmd "rm -rf" [".git" </> "modules" </> buildDir]
       () <- cmd "rm -rf" [buildDir]
       () <- cmd "cabal clean"
       () <- cmd "cabal sandbox delete"
       return ()
